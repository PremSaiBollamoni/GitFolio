
import React, { useState } from 'react';
import { useGitFolio } from '@/contexts/GitFolioContext';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Download, FilePlus, Share2, Loader2 } from 'lucide-react';
import { toast } from '@/hooks/use-toast';

export function PortfolioExport() {
  const { selectedRepos, user } = useGitFolio();
  const [generating, setGenerating] = useState(false);
  
  if (selectedRepos.length === 0) {
    return null;
  }
  
  // Function to generate HTML portfolio
  const generatePortfolioHTML = () => {
    if (!user) return '';
    
    // Create the HTML content
    const htmlContent = `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${user.name || user.login}'s Portfolio | Generated by GitFolio</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
    <style>
        :root {
            --primary-color: #3b82f6;
            --text-color: #1f2937;
            --bg-color: #ffffff;
            --card-bg: #f9fafb;
            --muted-color: #6b7280;
            --border-color: #e5e7eb;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Inter', sans-serif;
            color: var(--text-color);
            background-color: var(--bg-color);
            line-height: 1.5;
            padding: 2rem 1rem;
        }
        
        .container {
            max-width: 900px;
            margin: 0 auto;
        }
        
        header {
            text-align: center;
            margin-bottom: 3rem;
        }
        
        .avatar {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            object-fit: cover;
            border: 3px solid var(--primary-color);
            margin-bottom: 1rem;
        }
        
        h1 {
            font-size: 2.5rem;
            margin-bottom: 0.5rem;
        }
        
        .bio {
            color: var(--muted-color);
            margin-bottom: 1rem;
        }
        
        .links {
            display: flex;
            gap: 1rem;
            justify-content: center;
            margin-bottom: 1rem;
        }
        
        .links a {
            color: var(--primary-color);
            text-decoration: none;
        }
        
        .links a:hover {
            text-decoration: underline;
        }
        
        .badge {
            display: inline-block;
            background-color: var(--primary-color);
            color: white;
            padding: 0.25rem 0.75rem;
            border-radius: 9999px;
            font-size: 0.75rem;
            font-weight: 500;
            margin: 0.25rem;
        }
        
        .badge-outline {
            background-color: transparent;
            border: 1px solid var(--border-color);
            color: var(--muted-color);
        }
        
        .projects {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
        }
        
        .project-card {
            background-color: var(--card-bg);
            border-radius: 0.5rem;
            padding: 1.5rem;
            border: 1px solid var(--border-color);
        }
        
        .project-card h3 {
            font-size: 1.25rem;
            margin-bottom: 0.5rem;
        }
        
        .project-card a {
            color: var(--primary-color);
            text-decoration: none;
        }
        
        .project-card a:hover {
            text-decoration: underline;
        }
        
        .project-stats {
            display: flex;
            gap: 1rem;
            margin-bottom: 0.5rem;
            color: var(--muted-color);
            font-size: 0.875rem;
        }
        
        .project-desc {
            margin-bottom: 1rem;
        }
        
        .project-summary {
            margin-bottom: 1rem;
            padding-left: 1rem;
            border-left: 2px solid var(--primary-color);
            font-style: italic;
        }
        
        .tech-keywords {
            margin-bottom: 1rem;
        }
        
        .resume-points {
            margin-bottom: 1rem;
        }
        
        .resume-points h4 {
            font-size: 0.875rem;
            margin-bottom: 0.5rem;
        }
        
        .resume-points ul {
            list-style-type: disc;
            padding-left: 1.5rem;
        }
        
        .footer {
            text-align: center;
            margin-top: 4rem;
            color: var(--muted-color);
            font-size: 0.875rem;
        }
        
        @media (max-width: 768px) {
            .projects {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <img src="${user.avatar_url}" alt="${user.name || user.login}" class="avatar">
            <h1>${user.name || user.login}</h1>
            ${user.bio ? `<p class="bio">${user.bio}</p>` : ''}
            
            <div class="links">
                <a href="${user.html_url}" target="_blank">GitHub</a>
                ${user.blog ? `<a href="${user.blog}" target="_blank">Website</a>` : ''}
                ${user.email ? `<a href="mailto:${user.email}">Email</a>` : ''}
            </div>
            
            <div>
                ${user.location ? `<span class="badge badge-outline">${user.location}</span>` : ''}
                <span class="badge badge-outline">${user.public_repos} public repos</span>
                <span class="badge badge-outline">${user.followers} followers</span>
            </div>
        </header>
        
        <h2>Selected Projects</h2>
        <p style="margin-bottom: 2rem;">Here are some of my notable projects on GitHub.</p>
        
        <div class="projects">
            ${selectedRepos.map(repo => `
                <div class="project-card">
                    <h3>
                        <a href="${repo.html_url}" target="_blank">${repo.name}</a>
                    </h3>
                    
                    <div class="project-stats">
                        ${repo.stargazers_count ? `<span>‚≠ê ${repo.stargazers_count}</span>` : ''}
                        ${repo.forks_count ? `<span>üç¥ ${repo.forks_count}</span>` : ''}
                        ${repo.language ? `<span>${repo.language}</span>` : ''}
                    </div>
                    
                    ${repo.description ? `<p class="project-desc">${repo.description}</p>` : ''}
                    
                    ${repo.aiSummary ? `<p class="project-summary">${repo.aiSummary}</p>` : ''}
                    
                    <div class="tech-keywords">
                        ${repo.techKeywords ? repo.techKeywords.map(keyword => 
                            `<span class="badge">${keyword}</span>`
                        ).join('') : ''}
                    </div>
                    
                    ${repo.resumeBulletPoints && repo.resumeBulletPoints.length > 0 ? `
                        <div class="resume-points">
                            <h4>Key Contributions:</h4>
                            <ul>
                                ${repo.resumeBulletPoints.map(point => `<li>${point}</li>`).join('')}
                            </ul>
                        </div>
                    ` : ''}
                </div>
            `).join('')}
        </div>
        
        <div class="footer">
            <p>Generated by GitFolio | ${new Date().toLocaleDateString()}</p>
        </div>
    </div>
</body>
</html>
    `;
    
    return htmlContent;
  };
  
  // Function to download the portfolio as HTML
  const downloadPortfolio = () => {
    try {
      setGenerating(true);
      
      const htmlContent = generatePortfolioHTML();
      const blob = new Blob([htmlContent], { type: 'text/html' });
      const url = URL.createObjectURL(blob);
      
      // Create a temporary link element
      const a = document.createElement('a');
      a.href = url;
      a.download = `${user?.login || 'github'}-portfolio.html`;
      document.body.appendChild(a);
      a.click();
      
      // Clean up
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      toast({
        title: "Portfolio downloaded",
        description: "Your portfolio has been successfully downloaded as an HTML file.",
      });
    } catch (error) {
      console.error("Error downloading portfolio:", error);
      toast({
        title: "Download failed",
        description: error instanceof Error ? error.message : "Unknown error",
        variant: "destructive"
      });
    } finally {
      setGenerating(false);
    }
  };
  
  return (
    <Card>
      <CardHeader>
        <CardTitle>Export Portfolio</CardTitle>
        <CardDescription>
          You've selected {selectedRepos.length} repositories for your portfolio.
          Download your portfolio or save it for later.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-2">
          <p className="text-sm font-medium">Selected Projects:</p>
          <div className="flex flex-wrap gap-2">
            {selectedRepos.slice(0, 5).map(repo => (
              <Badge key={repo.id} variant="outline">
                {repo.name}
              </Badge>
            ))}
            {selectedRepos.length > 5 && (
              <Badge variant="outline">+{selectedRepos.length - 5} more</Badge>
            )}
          </div>
        </div>
      </CardContent>
      <CardFooter className="flex flex-wrap gap-2">
        <Button
          onClick={downloadPortfolio}
          disabled={generating}
          className="flex-1"
        >
          {generating ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Generating...
            </>
          ) : (
            <>
              <Download className="mr-2 h-4 w-4" />
              Download HTML
            </>
          )}
        </Button>
      </CardFooter>
    </Card>
  );
}
